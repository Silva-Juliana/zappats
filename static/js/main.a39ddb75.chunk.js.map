{"version":3,"sources":["images/logo-google.svg","components/input/Input.jsx","components/login/Login.jsx","components/create-account/CreateAccount.jsx","components/slider/Slider.jsx","components/button/Button.jsx","App.js","reportWebVitals.js","index.js"],"names":["Input","props","classDiv","error","className","label","onChange","type","name","errMsg","Login","useState","value","currentLogin","setCurrentLogin","currentPassword","setCurrentPassword","e","currentTarget","href","onClick","loginValue","passwordValue","test","src","logoGogle","alt","CreateAccount","currentName","setCurrentName","nameValue","Slider","title","informations","Button","classButton","active","AutoPlaySwipeableViews","autoPlay","SwipeableViews","App","currentSlide","setCurrentSlide","changeSlide","slide","changeLogin","index","onChangeIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a39ddb75.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo-google.c3d26fca.svg\";","import React from 'react'\r\nimport '../input/input.scss'\r\n\r\nfunction Input(props){ \r\n  let classDiv = 'container-input'\r\n\r\n  if(props.error){\r\n    classDiv = classDiv + ' error-div'\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={classDiv}>\r\n        <label>{props.label}</label>\r\n        <input \r\n          onChange={props.onChange}\r\n          className='new-input' \r\n          type={props.type} \r\n          name={props.name}\r\n        />\r\n\r\n        <span className='span'>{props.errMsg}</span>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Input;","import React, { useState } from 'react'\r\nimport logoGogle from '../../images/logo-google.svg'\r\nimport '../login/login.scss'\r\nimport Input from '../input/Input';\r\n\r\n\r\n//  Como todo o layout está em ingles achei melhor usar a mensagem de erro em inglês tambem\r\nfunction Login(props) {\r\n\r\n  const [currentLogin, setCurrentLogin] = useState({\r\n    value: '',\r\n    error: false,\r\n    errMsg: ''\r\n  });\r\n  const [currentPassword, setCurrentPassword] = useState({\r\n    value: '',\r\n    error: false,\r\n    errMsg: ''\r\n  });\r\n\r\n  const changeValue = (e)=> {\r\n    setCurrentLogin({\r\n      ...currentLogin,\r\n      value: e.currentTarget.value,\r\n      error: false,\r\n      errMsg: ''\r\n    })\r\n  }\r\n\r\n  const changePassword = (e)=> {\r\n    setCurrentPassword({\r\n      ...currentPassword,\r\n      value: e.currentTarget.value,\r\n      error: false,\r\n      errMsg: ''\r\n    });\r\n  }\r\n\r\n  const submit = () => {\r\n    const loginValue = currentLogin.value;\r\n    const passwordValue = currentPassword.value;\r\n\r\n    if (!loginValue){\r\n      setCurrentPassword({\r\n        ...currentPassword,\r\n        error: true,\r\n        errMsg: 'This field cannot be empty'\r\n      })\r\n      setCurrentLogin({\r\n        ...currentPassword,\r\n        error: true,\r\n        errMsg: 'This field cannot be empty'\r\n      })\r\n\r\n      return;\r\n    }\r\n    if (!passwordValue){\r\n      setCurrentPassword({\r\n        ...currentPassword,\r\n        error: true,\r\n        errMsg: 'This field cannot be empty'\r\n      })\r\n      setCurrentLogin({\r\n        ...currentPassword,\r\n        error: true,\r\n        errMsg: 'This field cannot be empty'\r\n      })\r\n\r\n      return;\r\n    }\r\n\r\n    if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(loginValue)){\r\n      setCurrentLogin({\r\n        ...currentPassword,\r\n        error: true,\r\n        errMsg: 'The e-mail is wrong'\r\n      })\r\n\r\n      return ;\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"container-login\">\r\n        <span className=\"span-login\">Invision</span>\r\n        <h1>Welcome to Invision</h1>\r\n        <div className=\"box-inputs\">\r\n          <form className=\"form-inputs\">\r\n            <Input errMsg={currentLogin.errMsg} error={currentLogin.error} onChange={changeValue} label=\"Users name or Email\" type=\"text\" name=\"name\"/>\r\n            <Input errMsg={currentPassword.errMsg} error={currentPassword.error} onChange={changePassword} label=\"Password\" type=\"password\" name=\"password\"/>\r\n            <a className=\"forgot-password\" href=\"/\">Forgot password?</a>\r\n          </form>\r\n        </div>\r\n        <div>\r\n          <button onClick={submit} className=\"button-sing\">Sign in</button>\r\n        </div>\r\n        <div className=\"container-or\">\r\n          <div className=\"line-or\"></div>\r\n          <span> Or</span>\r\n          <div className=\"line-or\"></div>\r\n        </div>\r\n        <div>\r\n          <button className=\"sing-google\">\r\n            <img src={logoGogle} alt=\"logo google\"></img>\r\n            Sign in with Google\r\n          </button>\r\n        </div>\r\n        <button className=\"login-invision\" onClick={props.onClick}>New Invision? <span className='span-invision'> Create Account</span></button>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Login;","import React, { useState } from 'react'\r\nimport logoGogle from '../../images/logo-google.svg'\r\nimport '../create-account/createAccount.scss'\r\nimport Input from '../input/Input';\r\n\r\n//  Como todo o layout está em ingles achei melhor usar a mensagem de erro em inglês tambem\r\n\r\nfunction CreateAccount(props) {\r\n\r\n  const [currentLogin, setCurrentLogin] = useState({\r\n    value: '',\r\n    error: false,\r\n    errMsg: ''\r\n  });\r\n  const [currentPassword, setCurrentPassword] = useState({\r\n    value: '',\r\n    error: false,\r\n    errMsg: ''\r\n  });\r\n\r\n  const [currentName, setCurrentName] = useState({\r\n    value: '',\r\n    error: false,\r\n    errMsg: ''\r\n  });\r\n\r\n  const changeValue = (e) => {\r\n    setCurrentLogin({\r\n      ...currentLogin,\r\n      value: e.currentTarget.value,\r\n      error: false,\r\n      errMsg: ''\r\n    })\r\n  }\r\n\r\n  const changePassword = (e) => {\r\n    setCurrentPassword({\r\n      ...currentPassword,\r\n      value: e.currentTarget.value,\r\n      error: false,\r\n      errMsg: ''\r\n    });\r\n  }\r\n\r\n  const changeName = (e) => {\r\n    setCurrentName({\r\n      ...currentName,\r\n      value: e.currentTarget.value,\r\n      error: false,\r\n      errMsg: ''\r\n    })\r\n  }\r\n\r\n  const submit = () => {\r\n    const loginValue = currentLogin.value;\r\n    const passwordValue = currentPassword.value;\r\n    const nameValue = currentName.value;\r\n\r\n    if (!loginValue) {\r\n      setCurrentPassword({\r\n        ...currentPassword,\r\n        error: true,\r\n        errMsg: 'This field cannot be empty'\r\n      })\r\n      setCurrentLogin({\r\n        ...currentPassword,\r\n        error: true,\r\n        errMsg: 'This field cannot be empty'\r\n      })\r\n      setCurrentName({\r\n        ...currentName,\r\n        error: true,\r\n        errMsg: 'This field cannot be empty'\r\n      })\r\n\r\n      return;\r\n    }\r\n    if (!passwordValue) {\r\n      setCurrentPassword({\r\n        ...currentPassword,\r\n        error: true,\r\n        errMsg: 'This field cannot be empty'\r\n      })\r\n      setCurrentLogin({\r\n        ...currentPassword,\r\n        error: true,\r\n        errMsg: 'This field cannot be empty'\r\n      })\r\n      setCurrentName({\r\n        ...currentName,\r\n        error: true,\r\n        errMsg: 'This field cannot be empty'\r\n      })\r\n\r\n      return;\r\n    }\r\n\r\n    if (!nameValue) {\r\n      setCurrentPassword({\r\n        ...currentPassword,\r\n        error: true,\r\n        errMsg: 'This field cannot be empty'\r\n      })\r\n      setCurrentLogin({\r\n        ...currentPassword,\r\n        error: true,\r\n        errMsg: 'This field cannot be empty'\r\n      })\r\n      setCurrentName({\r\n        ...currentName,\r\n        error: true,\r\n        errMsg: 'This field cannot be empty'\r\n      })\r\n\r\n      return;\r\n    }\r\n\r\n    if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(loginValue)) {\r\n      setCurrentLogin({\r\n        ...currentPassword,\r\n        error: true,\r\n        errMsg: 'The e-mail is wrong'\r\n      })\r\n\r\n      return;\r\n    }\r\n\r\n    if (!/\\w{6,}/.test(passwordValue)) {\r\n      setCurrentPassword({\r\n        error: true,\r\n        errMsg: 'Password cannot be less than 6 characters'\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container-login\">\r\n        <span className=\"span-login\">Invision</span>\r\n        <h1>Getting Started</h1>\r\n        <div className=\"box-inputs\">\r\n          <form className=\"form-inputs\">\r\n            <Input errMsg={currentName.errMsg} error={currentName.error} onChange={changeName} label=\"Full Name\" type=\"text\" name=\"name\" />\r\n            <Input errMsg={currentLogin.errMsg} error={currentLogin.error} onChange={changeValue} label=\"Users name or Email\" type=\"text\" name=\"name\" />\r\n            <Input errMsg={currentPassword.errMsg} error={currentPassword.error} onChange={changePassword} label=\"Password\" type=\"password\" name=\"password\" />\r\n          </form>\r\n        </div>\r\n        <div>\r\n          <button onClick={submit} className=\"button-sing\">Sign up</button>\r\n        </div>\r\n        <div className=\"container-or\">\r\n          <div className=\"line-or\"></div>\r\n          <span> Or</span>\r\n          <div className=\"line-or\"></div>\r\n        </div>\r\n        <div>\r\n          <button className=\"sing-google\">\r\n            <img src={logoGogle} alt=\"logo google\"></img>\r\n            Sign up with Google\r\n          </button>\r\n        </div>\r\n        <p className=\"span-terms\">\r\n          By signing up, you agree to Invision\r\n          <a className=\"a-terms\" href=\"https://www.w3schools.com\"> Terms of Conditions</a> and <a className=\"a-terms\" href=\"https://www.w3schools.com\">Privacy Policy</a>\r\n        </p>\r\n        <button className=\"login-invision\" onClick={props.onClick}>Already on Invision? <span className='span-invision'>Log in</span></button>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CreateAccount;","import React from 'react'\r\nimport '../slider/slider.scss'\r\n\r\nfunction Slider(props) {\r\n  return (\r\n    <div className={props.className}>\r\n      <span className=\"title-how-to\">\r\n        {props.title}\r\n      </span>\r\n      <p className=\"informations\">\r\n        {props.informations}\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Slider;","import React from 'react'\r\nimport '../button/button.scss'\r\n\r\nfunction Button(props){ \r\n  let classButton = \"button-slide\"\r\n\r\n  if(props.active){\r\n    classButton = classButton + ' button-is-active'\r\n  }\r\n\r\n  return(\r\n    <>\r\n      <button className={classButton} onClick={props.onClick}></button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Button;","import './App.scss';\nimport Login from './components/login/Login';\nimport CreateAccount from './components/create-account/CreateAccount';\nimport Slide from './components/slider/Slider';\nimport SwipeableViews from 'react-swipeable-views';\nimport { autoPlay } from 'react-swipeable-views-utils';\nimport Button from './components/button/Button';\nimport { useState } from 'react';\n\nconst AutoPlaySwipeableViews = autoPlay(SwipeableViews);\n\n\nfunction App() {\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [currentLogin, setCurrentLogin] = useState(1);\n\n  const changeSlide = (slide) => () => {\n    setCurrentSlide(slide)\n  }\n\n\n  const changeLogin = (index) => () => {\n    setCurrentLogin(index)\n  }\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"box-slider\">\n        <AutoPlaySwipeableViews index={currentSlide} onChangeIndex={(index)=> changeSlide(index)()}>\n          <Slide\n            title=\"Marcenas mattis egestas\"\n            informations=\"Erdum et malesuada fames ac ante ileum\n            primmer in faucibus uspendisse porta.\"\n            className=\"container-how-to\"\n          />\n          <Slide\n            title=\"Neque porro quisquam est qui dolorem\"\n            informations=\" when an unknown printer took a galley of type and scrambled it to make a type specimen book. \"\n            className=\"container-how-to2\"\n          />\n          <Slide\n            title=\"Neque porro quisquam est qui dolorem\"\n            informations=\" when an unknown printer took a galley of type and scrambled it to make a type specimen book. \"\n            className=\"container-how-to3\"\n          />\n          <Slide\n            title=\"Neque porro quisquam est qui dolorem\"\n            informations=\" when an unknown printer took a galley of type and scrambled it to make a type specimen book. \"\n            className=\"container-how-to4\"\n          />\n        </AutoPlaySwipeableViews>\n        <div className=\"box-button-slide\">\n          <Button active={currentSlide === 0} onClick={changeSlide(0)} />\n          <Button active={currentSlide === 1} onClick={changeSlide(1)}/>\n          <Button active={currentSlide === 2} onClick={changeSlide(2)}/>\n          <Button active={currentSlide === 3} onClick={changeSlide(3)}/>\n        </div>\n      </div>\n      {currentLogin === 1 && <Login onClick={changeLogin(0)}/>}\n      {currentLogin === 0 && <CreateAccount  onClick={changeLogin(1)} />}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}